initSidebarItems({"enum":[["BlocksRequestError","Error returned by [`ChainNetwork::blocks_request`]."],["CallProofRequestError","Error returned by [`ChainNetwork::call_proof_request`]."],["DiscoveryError","Error during [`ChainNetwork::kademlia_discovery_round`]."],["Event","Event generated by [`ChainNetwork::next_event`]."],["GrandpaWarpSyncRequestError","Error returned by [`ChainNetwork::grandpa_warp_sync_request`]."],["StorageProofRequestError","Error returned by [`ChainNetwork::storage_proof_request`]."]],"struct":[["ChainConfig","Configuration for a specific overlay network."],["ChainNetwork","Data structure containing the list of all connections, pending or not, and their latest known state. See also the module-level documentation."],["Config","Configuration for a [`ChainNetwork`]."],["ConnectionId","Identifier of a connection spawned by the [`ChainNetwork`]."],["DiscoveryInsert","Successfull outcome to [`ChainNetwork::kademlia_discovery_round`]."],["EncodedBlockAnnounce","Undecoded but valid block announce."],["EncodedBlockAnnounceHandshake","Undecoded but valid block announce handshake."],["EncodedGrandpaCommitMessage","Undecoded but valid GrandPa commit message."],["GrandpaState",""],["IdentifyRequestIn","See [`Event::IdentifyRequestIn`]."],["PendingId","Identifier of a pending connection requested by the network through a [`StartConnect`]."],["ReadWrite","Outcome of calling [`ChainNetwork::read_write`]."],["StartConnect","User must start connecting to the given multiaddress."],["SubstreamOpen",""]]});