initSidebarItems({"enum":[["ConnectionError","Protocol error within the context of a connection. See [`Network::read_write`]."],["Event","Event generated by [`Network::next_event`]."],["QueueNotificationError","Error potentially returned by [`Network::queue_notification`]."],["RequestError","Error potentially returned by [`Network::request`]."]],"mod":[["async_rw_with_buffers","Augments an implementation of `AsyncRead` and `AsyncWrite` with a read buffer and a write buffer."],["connection","Module containing everything related to the processing of a single libp2p connection."],["discovery","Mechanisms related to discovering nodes that are part of a certain overlay network."],["multiaddr",""],["peer_id",""],["peerset","Data structure storing a networking state. Helper for managing connectivity to overlay networks."]],"struct":[["Config","Configuration for a [`Network`]."],["ConnectionId","Identifier of a connection spawned by the [`Network`]."],["ConnectionReadyFuture","Future ready when a connection has data to give out via [`Network::read_write`]."],["Multiaddr","Representation of a Multiaddr."],["Network","Data structure containing the list of all connections, pending or not, and their latest known state. See also the module-level documentation."],["OverlayNetworkConfig","Configuration for a specific overlay network."],["PendingId","Identifier of a pending connection requested by the network through a [`StartConnect`]."],["ReadWrite","Outcome of calling [`Network::read_write`]."],["StartConnect","User must start connecting to the given multiaddress."],["SubstreamOpen",""]]});